"""
Django settings for unicaronas_api project.

Generated by 'django-admin startproject' using Django 2.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import dj_database_url

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(__file__))
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))

# Website root url
ROOT_URL = os.environ.get('ROOT_URL', 'localhost:8000')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production a secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET', 'abc123')
# 256 bit prime
SECRET_PRIME = int(os.environ.get('SECRET_PRIME', '1'))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = eval(os.environ.get('DEBUG', 'False').capitalize())

# manage.py test mode that disables fb connection stuff
TEST_MODE = eval(os.environ.get('TEST_MODE', 'False').capitalize())

ALLOWED_HOSTS = eval(os.environ.get('ALLOWED_HOSTS', '["*"]'))


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.gis',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.github',
    'allauth.socialaccount.providers.google',

    'oauth',
    'user_data',
    'trips',
    'search',

    'maintenance_mode',

    'debug_toolbar',

    'oauth2_provider',
    'rest_framework',
    'rest_framework_filters',

    'django_extensions',

    'captcha',

    'drf_yasg',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'maintenance_mode.middleware.MaintenanceModeMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(PROJECT_ROOT, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
)


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(PROJECT_ROOT, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)
STATICFILES_DIRS = (
    os.path.join(PROJECT_ROOT, 'static'),
)

# Celery stuff
REDIS_URL = os.environ.get('REDIS_URL')
CELERY_BROKER_URL = REDIS_URL


# Cache settings
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}


# Update database configuration with $DATABASE_URL.
db_from_env = dj_database_url.config(conn_max_age=500)
DATABASES['default'].update(db_from_env)
DATABASES['default']['ENGINE'] = 'django.contrib.gis.db.backends.postgis'


# Honor the 'X-Forwarded-Proto' header for request.is_secure()
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')


# Email settings
DEFAULT_CONTACT_EMAIL = os.environ.get('EMAIL_ACCOUNT')
DEFAULT_FROM_EMAIL = os.environ.get('EMAIL_ACCOUNT')
EMAIL_HOST_USER = os.environ.get('EMAIL_ACCOUNT')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_PASSWORD')
EMAIL_USE_TLS = eval(os.environ.get('EMAIL_USE_TLS', 'True'))
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '587'))
SERVER_EMAIL = os.environ.get('EMAIL_ACCOUNT')

ADMINS = [('Admin', os.environ.get('ADMIN_ACCOUNT')), ]


# Debug Toolbar
SHOW_TOOLBAR_CALLBACK = eval(os.environ.get('SHOW_TOOLBAR_CALLBACK', 'True'))
DEBUG_TOOLBAR_CONFIG = {
    'SHOW_TOOLBAR_CALLBACK': lambda r: SHOW_TOOLBAR_CALLBACK  # disables it
    # '...
}


# Maintenance mode
MAINTENANCE_MODE = eval(os.environ.get('MAINTENANCE_MODE', 'False'))
MAINTENANCE_MODE_IGNORE_ADMIN_SITE = True
MAINTENANCE_MODE_IGNORE_SUPERUSER = True


# OAuth2
OAUTH2_PROVIDER = {
    # this is the list of available scopes
    'SCOPES': {
        'basic:read': 'Seu primeiro e segundo nome',
        'profile:read': 'Seu aniversário e gênero',
        'phone:read': 'Seu número de celular',
        'email:read': 'Seu endereço de email principal e acadêmico',
        'student:read': 'Seu perfil de aluno na sua universidade',
        'driver:read': 'Informações sobre seu carro',
        'driver:preferences:read': 'Suas preferências como motorista',
        'trips:read': 'Pesquisar caronas por você',
        'trips:driver:read': 'Detalhes sobre as caronas, e seus passageiros, em que você é motorista',
        'trips:driver:write': 'Criar, editar e apagar as caronas em que você é motorista e gerenciar seus passageiros',
        'trips:passenger:read': 'Informações sobre as caronas em que você é passageiro',
        'trips:passenger:write': 'Entrar e sair de caronas por você'
    },
    "DEFAULT_SCOPES": ['basic:read'],
    'REQUEST_APPROVAL_PROMPT': 'auto',
    'APPLICATION_MODEL': 'oauth.Application',
    'SCOPES_BACKEND_CLASS': 'oauth.scopes.CustomSettingsScopes',
    "REFRESH_TOKEN_GRACE_PERIOD_SECONDS": 120,
    "ACCESS_TOKEN_EXPIRE_SECONDS": 3600,
}
OAUTH2_PROVIDER_APPLICATION_MODEL = 'oauth.Application'


# Rest settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'project.pagination.CustomLimitOffsetPagination',
    'DEFAULT_PERMISSION_CLASSES': ['rest_framework.permissions.IsAdminUser'],
    'EXCEPTION_HANDLER': 'project.exceptions.custom_exception_handler',
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',
    'DEFAULT_VERSION': 'v1.0',
    'ALLOWED_VERSIONS': ['v1.0'],
    'DEFAULT_THROTTLE_CLASSES': (
        'project.throttling.ApplicationBurstRateThrottle',
        'project.throttling.ApplicationSustainedRateThrottle',
    ),
    'DEFAULT_THROTTLE_RATES': {
        'application_burst': '60/min',  # Burst application calls
        'application_sustained': '10000/day',   # Sustained application calls
    }
}


# Sites framework
SITE_ID = 2

# AllAuth settings
ACCOUNT_AUTHENTICATION_METHOD = "username"
ACCOUNT_PRESERVE_USERNAME_CASING = False
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_DEFAULT_HTTP_PROTOCOL = "http"
ACCOUNT_FORMS = {
    'signup': 'user_data.forms.CustomSignupForm',
    'login': 'user_data.forms.CustomLoginForm',
}
SOCIALACCOUNT_FORMS = {
    'signup': 'user_data.forms.CustomSocialSignupForm'
}
ACCOUNT_SIGNUP_FORM_CLASS = 'user_data.forms2.ExtraSignupFields'
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True


def ACCOUNT_USER_DISPLAY(user):
    return user.get_full_name()


SOCIALACCOUNT_AUTO_SIGNUP = False
ACCOUNT_LOGOUT_ON_GET = True


# Captcha Settings
NOCAPTCHA = True

# Documentation settings
SWAGGER_SETTINGS = {
    'DEFAULT_AUTO_SCHEMA_CLASS': 'project.swagger_schema.CustomTagAutoSchema',
    'USE_SESSION_AUTH': False,
    'SECURITY_DEFINITIONS': {
        'unicaronas auth': {
            'type': 'oauth2',
            'description': """
OAuth2 é uma forma de autenticação que permite que seu aplicativo obtenha acesso granular aos dados dos seus usuários. Seu usuário tem controle total sobre quais informações deseja compartilhar e você acessa a API usando endpoints comuns HTTP. OAuth2 possui flows para aplicativos web, desktop e mobile, todos implementados na API do Unicaronas. Para saber mais, [visite o guia de OAuth2](/oauth2_guide/)

Abaixo você encontrará os `scopes` disponíveis e suas descrições, além das URLs de autorização e troca de tokens.""",
            'authorizationUrl': '/o/authorize/',
            'tokenUrl': '/o/token/',
            'flow': 'accessCode',
            'scopes': OAUTH2_PROVIDER['SCOPES']
        }
    },
    'OAUTH2_CONFIG': {
        'clientId': '9hzg1FNkZPeR1761B460TTDyYH8dkfjkzTXgYuaz',
        'clientSecret': 'Bg76qkj0ci7gPCtWrqvZniVkuh1KAYpVKcWzq4o1ryDtWu60qHJDg50a7bkSxEHFUVPGSvRnPPBvc6zEle5jKrlpb7n0jX8p7ulL5HBE9OP1S7mwZabHTRBP7SL1OACQ',
        'appName': 'Seu aplicativo'
    },
}


# Geocoding API
GEOCODING_API_KEY = os.environ.get('GEOCODING_API_KEY')
